{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { permissionsList } from './schemas/fields';\n// At it's simplest, the access control returns a yes or no value depending on the users session\nexport function isSignedIn({\n  session\n}) {\n  return !!session;\n}\nconst generatedPermissions = Object.fromEntries(permissionsList.map(permission => [permission, function ({\n  session\n}) {\n  var _session$data$role;\n\n  return !!(session !== null && session !== void 0 && (_session$data$role = session.data.role) !== null && _session$data$role !== void 0 && _session$data$role[permission]);\n}])); // Permissions check if someone meets a criteria - yes or no.\n\nexport const permissions = _objectSpread(_objectSpread({}, generatedPermissions), {}, {\n  isAwesome({\n    session\n  }) {\n    return !!(session !== null && session !== void 0 && session.data.name.includes('wes'));\n  }\n\n}); // Rule based function\n// Rules can return a boolean - yes or no - or a filter which limits which products they can CRUD.\n\nexport const rules = {\n  canManageRotis({\n    session\n  }) {\n    if (!isSignedIn({\n      session\n    })) {\n      return false;\n    } // 1. Do they have the permission of canManageProducts\n\n\n    if (permissions.canManageRotis({\n      session\n    })) {\n      return true;\n    } // 2. If not, do they own this item?\n\n\n    return {\n      user: {\n        id: session === null || session === void 0 ? void 0 : session.itemId\n      }\n    };\n  },\n\n  // canOrder({ session }: ListAccessArgs) {\n  //   if (!isSignedIn({ session })) {\n  //     return false;\n  //   }\n  //   // 1. Do they have the permission of canManageProducts\n  //   if (permissions.canManageCart({ session })) {\n  //     return true;\n  //   }\n  //   // 2. If not, do they own this item?\n  //   return { user: { id: session?.itemId } };\n  // },\n  // canManageOrderItems({ session }: ListAccessArgs) {\n  //   if (!isSignedIn({ session })) {\n  //     return false;\n  //   }\n  //   // 1. Do they have the permission of canManageProducts\n  //   if (permissions.canManageCart({ session })) {\n  //     return true;\n  //   }\n  //   // 2. If not, do they own this item?\n  //   return { order: { user: { id: session?.itemId } } };\n  // },\n  canReadRotis({\n    session\n  }) {\n    if (!isSignedIn({\n      session\n    })) {\n      return false;\n    }\n\n    if (permissions.canManageRotis({\n      session\n    })) {\n      return true; // They can read everything!\n    } // They should only see available products (based on the status field)\n\n\n    return {\n      status: 'AVAILABLE'\n    };\n  },\n\n  canManageUsers({\n    session\n  }) {\n    if (!isSignedIn({\n      session\n    })) {\n      return false;\n    }\n\n    if (permissions.canManageUsers({\n      session\n    })) {\n      return true;\n    } // Otherwise they may only update themselves!\n\n\n    return {\n      id: session === null || session === void 0 ? void 0 : session.itemId\n    };\n  }\n\n};","map":null,"metadata":{},"sourceType":"module"}