input RotiRelateToManyInput {
  create: [RotiCreateInput]
  connect: [RotiWhereUniqueInput]
  disconnect: [RotiWhereUniqueInput]
  disconnectAll: Boolean
}

input RoleRelateToOneInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: RoleWhereUniqueInput
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type User {
  id: ID!
  name: String
  firstname: String
  email: String
  password_is_set: Boolean
  phone: String
  rotis(
    where: RotiWhereInput! = {}
    search: String
    sortBy: [SortRotisBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RotiOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Roti!]!
  _rotisMeta(
    where: RotiWhereInput! = {}
    search: String
    sortBy: [SortRotisBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RotiOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use rotisCount instead."
    )
  rotisCount(where: RotiWhereInput! = {}): Int
  language: String
  role: Role
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  firstname: String
  firstname_not: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  firstname_i: String
  firstname_not_i: String
  firstname_contains_i: String
  firstname_not_contains_i: String
  firstname_starts_with_i: String
  firstname_not_starts_with_i: String
  firstname_ends_with_i: String
  firstname_not_ends_with_i: String
  firstname_in: [String]
  firstname_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean
  phone: String
  phone_not: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  phone_i: String
  phone_not_i: String
  phone_contains_i: String
  phone_not_contains_i: String
  phone_starts_with_i: String
  phone_not_starts_with_i: String
  phone_ends_with_i: String
  phone_not_ends_with_i: String
  phone_in: [String]
  phone_not_in: [String]

  """
   condition must be true for all nodes
  """
  rotis_every: RotiWhereInput

  """
   condition must be true for at least 1 node
  """
  rotis_some: RotiWhereInput

  """
   condition must be false for all nodes
  """
  rotis_none: RotiWhereInput
  language: String
  language_not: String
  language_in: [String]
  language_not_in: [String]
  role: RoleWhereInput
  role_is_null: Boolean
  passwordResetToken_is_set: Boolean
  passwordResetIssuedAt: String
  passwordResetIssuedAt_not: String
  passwordResetIssuedAt_lt: String
  passwordResetIssuedAt_lte: String
  passwordResetIssuedAt_gt: String
  passwordResetIssuedAt_gte: String
  passwordResetIssuedAt_in: [String]
  passwordResetIssuedAt_not_in: [String]
  passwordResetRedeemedAt: String
  passwordResetRedeemedAt_not: String
  passwordResetRedeemedAt_lt: String
  passwordResetRedeemedAt_lte: String
  passwordResetRedeemedAt_gt: String
  passwordResetRedeemedAt_gte: String
  passwordResetRedeemedAt_in: [String]
  passwordResetRedeemedAt_not_in: [String]
}

input UserWhereUniqueInput {
  id: ID!
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  firstname_ASC
  firstname_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  language_ASC
  language_DESC
  passwordResetIssuedAt_ASC
  passwordResetIssuedAt_DESC
  passwordResetRedeemedAt_ASC
  passwordResetRedeemedAt_DESC
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  firstname: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  language: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  firstname: String
  email: String
  password: String
  phone: String
  rotis: RotiRelateToManyInput
  language: String
  role: RoleRelateToOneInput
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  firstname: String
  email: String
  password: String
  phone: String
  rotis: RotiRelateToManyInput
  language: String
  role: RoleRelateToOneInput
  passwordResetToken: String
  passwordResetIssuedAt: String
  passwordResetRedeemedAt: String
}

input UsersCreateInput {
  data: UserCreateInput
}

input UserRelateToOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  disconnectAll: Boolean
}

input VoteRelateToManyInput {
  create: [VoteCreateInput]
  connect: [VoteWhereUniqueInput]
  disconnect: [VoteWhereUniqueInput]
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type Roti {
  id: ID!
  subject: String
  description: String
  shorturl: String
  datecreated: String
  status: String
  user: User
  votes(
    where: VoteWhereInput! = {}
    search: String
    sortBy: [SortVotesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [VoteOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Vote!]!
  _votesMeta(
    where: VoteWhereInput! = {}
    search: String
    sortBy: [SortVotesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [VoteOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use votesCount instead."
    )
  votesCount(where: VoteWhereInput! = {}): Int
  tags: String
}

input RotiWhereInput {
  AND: [RotiWhereInput!]
  OR: [RotiWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  subject: String
  subject_not: String
  subject_contains: String
  subject_not_contains: String
  subject_starts_with: String
  subject_not_starts_with: String
  subject_ends_with: String
  subject_not_ends_with: String
  subject_i: String
  subject_not_i: String
  subject_contains_i: String
  subject_not_contains_i: String
  subject_starts_with_i: String
  subject_not_starts_with_i: String
  subject_ends_with_i: String
  subject_not_ends_with_i: String
  subject_in: [String]
  subject_not_in: [String]
  description: String
  description_not: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  description_i: String
  description_not_i: String
  description_contains_i: String
  description_not_contains_i: String
  description_starts_with_i: String
  description_not_starts_with_i: String
  description_ends_with_i: String
  description_not_ends_with_i: String
  description_in: [String]
  description_not_in: [String]
  shorturl: String
  shorturl_not: String
  shorturl_contains: String
  shorturl_not_contains: String
  shorturl_starts_with: String
  shorturl_not_starts_with: String
  shorturl_ends_with: String
  shorturl_not_ends_with: String
  shorturl_i: String
  shorturl_not_i: String
  shorturl_contains_i: String
  shorturl_not_contains_i: String
  shorturl_starts_with_i: String
  shorturl_not_starts_with_i: String
  shorturl_ends_with_i: String
  shorturl_not_ends_with_i: String
  shorturl_in: [String]
  shorturl_not_in: [String]
  datecreated: String
  datecreated_not: String
  datecreated_lt: String
  datecreated_lte: String
  datecreated_gt: String
  datecreated_gte: String
  datecreated_in: [String]
  datecreated_not_in: [String]
  status: String
  status_not: String
  status_in: [String]
  status_not_in: [String]
  user: UserWhereInput
  user_is_null: Boolean

  """
   condition must be true for all nodes
  """
  votes_every: VoteWhereInput

  """
   condition must be true for at least 1 node
  """
  votes_some: VoteWhereInput

  """
   condition must be false for all nodes
  """
  votes_none: VoteWhereInput
  tags: String
  tags_not: String
  tags_contains: String
  tags_not_contains: String
  tags_starts_with: String
  tags_not_starts_with: String
  tags_ends_with: String
  tags_not_ends_with: String
  tags_i: String
  tags_not_i: String
  tags_contains_i: String
  tags_not_contains_i: String
  tags_starts_with_i: String
  tags_not_starts_with_i: String
  tags_ends_with_i: String
  tags_not_ends_with_i: String
  tags_in: [String]
  tags_not_in: [String]
}

input RotiWhereUniqueInput {
  id: ID!
}

enum SortRotisBy {
  id_ASC
  id_DESC
  subject_ASC
  subject_DESC
  description_ASC
  description_DESC
  shorturl_ASC
  shorturl_DESC
  datecreated_ASC
  datecreated_DESC
  status_ASC
  status_DESC
  tags_ASC
  tags_DESC
}

input RotiOrderByInput {
  id: OrderDirection
  subject: OrderDirection
  description: OrderDirection
  shorturl: OrderDirection
  datecreated: OrderDirection
  status: OrderDirection
  tags: OrderDirection
}

input RotiUpdateInput {
  subject: String
  description: String
  shorturl: String
  datecreated: String
  status: String
  user: UserRelateToOneInput
  votes: VoteRelateToManyInput
  tags: String
}

input RotisUpdateInput {
  id: ID!
  data: RotiUpdateInput
}

input RotiCreateInput {
  subject: String
  description: String
  shorturl: String
  datecreated: String
  status: String
  user: UserRelateToOneInput
  votes: VoteRelateToManyInput
  tags: String
}

input RotisCreateInput {
  data: RotiCreateInput
}

"""
 A keystone list
"""
type Vote {
  id: ID!
  name: String
  email: String
  note: String
  mood: String
  comment: String
  rotis(
    where: RotiWhereInput! = {}
    search: String
    sortBy: [SortRotisBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RotiOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Roti!]!
  _rotisMeta(
    where: RotiWhereInput! = {}
    search: String
    sortBy: [SortRotisBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RotiOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use rotisCount instead."
    )
  rotisCount(where: RotiWhereInput! = {}): Int
}

input VoteWhereInput {
  AND: [VoteWhereInput!]
  OR: [VoteWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  note: String
  note_not: String
  note_in: [String]
  note_not_in: [String]
  mood: String
  mood_not: String
  mood_in: [String]
  mood_not_in: [String]
  comment: String
  comment_not: String
  comment_contains: String
  comment_not_contains: String
  comment_starts_with: String
  comment_not_starts_with: String
  comment_ends_with: String
  comment_not_ends_with: String
  comment_i: String
  comment_not_i: String
  comment_contains_i: String
  comment_not_contains_i: String
  comment_starts_with_i: String
  comment_not_starts_with_i: String
  comment_ends_with_i: String
  comment_not_ends_with_i: String
  comment_in: [String]
  comment_not_in: [String]

  """
   condition must be true for all nodes
  """
  rotis_every: RotiWhereInput

  """
   condition must be true for at least 1 node
  """
  rotis_some: RotiWhereInput

  """
   condition must be false for all nodes
  """
  rotis_none: RotiWhereInput
}

input VoteWhereUniqueInput {
  id: ID!
}

enum SortVotesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  note_ASC
  note_DESC
  mood_ASC
  mood_DESC
  comment_ASC
  comment_DESC
}

input VoteOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  note: OrderDirection
  mood: OrderDirection
  comment: OrderDirection
}

input VoteUpdateInput {
  name: String
  email: String
  note: String
  mood: String
  comment: String
  rotis: RotiRelateToManyInput
}

input VotesUpdateInput {
  id: ID!
  data: VoteUpdateInput
}

input VoteCreateInput {
  name: String
  email: String
  note: String
  mood: String
  comment: String
  rotis: RotiRelateToManyInput
}

input VotesCreateInput {
  data: VoteCreateInput
}

input UserRelateToManyInput {
  create: [UserCreateInput]
  connect: [UserWhereUniqueInput]
  disconnect: [UserWhereUniqueInput]
  disconnectAll: Boolean
}

"""
 A keystone list
"""
type Role {
  id: ID!
  name: String
  canManageRotis: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  canManageVotes: Boolean
  assignedTo(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]!
  _assignedToMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use assignedToCount instead."
    )
  assignedToCount(where: UserWhereInput! = {}): Int
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID]
  id_not_in: [ID]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  canManageRotis: Boolean
  canManageRotis_not: Boolean
  canSeeOtherUsers: Boolean
  canSeeOtherUsers_not: Boolean
  canManageUsers: Boolean
  canManageUsers_not: Boolean
  canManageRoles: Boolean
  canManageRoles_not: Boolean
  canManageCart: Boolean
  canManageCart_not: Boolean
  canManageOrders: Boolean
  canManageOrders_not: Boolean
  canManageVotes: Boolean
  canManageVotes_not: Boolean

  """
   condition must be true for all nodes
  """
  assignedTo_every: UserWhereInput

  """
   condition must be true for at least 1 node
  """
  assignedTo_some: UserWhereInput

  """
   condition must be false for all nodes
  """
  assignedTo_none: UserWhereInput
}

input RoleWhereUniqueInput {
  id: ID!
}

enum SortRolesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  canManageRotis_ASC
  canManageRotis_DESC
  canSeeOtherUsers_ASC
  canSeeOtherUsers_DESC
  canManageUsers_ASC
  canManageUsers_DESC
  canManageRoles_ASC
  canManageRoles_DESC
  canManageCart_ASC
  canManageCart_DESC
  canManageOrders_ASC
  canManageOrders_DESC
  canManageVotes_ASC
  canManageVotes_DESC
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canManageRotis: OrderDirection
  canSeeOtherUsers: OrderDirection
  canManageUsers: OrderDirection
  canManageRoles: OrderDirection
  canManageCart: OrderDirection
  canManageOrders: OrderDirection
  canManageVotes: OrderDirection
}

input RoleUpdateInput {
  name: String
  canManageRotis: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  canManageVotes: Boolean
  assignedTo: UserRelateToManyInput
}

input RolesUpdateInput {
  id: ID!
  data: RoleUpdateInput
}

input RoleCreateInput {
  name: String
  canManageRotis: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  canManageVotes: Boolean
  assignedTo: UserRelateToManyInput
}

input RolesCreateInput {
  data: RoleCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type _QueryMeta {
  count: Int
}

type Mutation {
  """
   Create a single User item.
  """
  createUser(data: UserCreateInput): User

  """
   Create multiple User items.
  """
  createUsers(data: [UsersCreateInput]): [User]

  """
   Update a single User item by ID.
  """
  updateUser(id: ID!, data: UserUpdateInput): User

  """
   Update multiple User items by ID.
  """
  updateUsers(data: [UsersUpdateInput]): [User]

  """
   Delete a single User item by ID.
  """
  deleteUser(id: ID!): User

  """
   Delete multiple User items by ID.
  """
  deleteUsers(ids: [ID!]): [User]

  """
   Create a single Roti item.
  """
  createRoti(data: RotiCreateInput): Roti

  """
   Create multiple Roti items.
  """
  createRotis(data: [RotisCreateInput]): [Roti]

  """
   Update a single Roti item by ID.
  """
  updateRoti(id: ID!, data: RotiUpdateInput): Roti

  """
   Update multiple Roti items by ID.
  """
  updateRotis(data: [RotisUpdateInput]): [Roti]

  """
   Delete a single Roti item by ID.
  """
  deleteRoti(id: ID!): Roti

  """
   Delete multiple Roti items by ID.
  """
  deleteRotis(ids: [ID!]): [Roti]

  """
   Create a single Vote item.
  """
  createVote(data: VoteCreateInput): Vote

  """
   Create multiple Vote items.
  """
  createVotes(data: [VotesCreateInput]): [Vote]

  """
   Update a single Vote item by ID.
  """
  updateVote(id: ID!, data: VoteUpdateInput): Vote

  """
   Update multiple Vote items by ID.
  """
  updateVotes(data: [VotesUpdateInput]): [Vote]

  """
   Delete a single Vote item by ID.
  """
  deleteVote(id: ID!): Vote

  """
   Delete multiple Vote items by ID.
  """
  deleteVotes(ids: [ID!]): [Vote]

  """
   Create a single Role item.
  """
  createRole(data: RoleCreateInput): Role

  """
   Create multiple Role items.
  """
  createRoles(data: [RolesCreateInput]): [Role]

  """
   Update a single Role item by ID.
  """
  updateRole(id: ID!, data: RoleUpdateInput): Role

  """
   Update multiple Role items by ID.
  """
  updateRoles(data: [RolesUpdateInput]): [Role]

  """
   Delete a single Role item by ID.
  """
  deleteRole(id: ID!): Role

  """
   Delete multiple Role items by ID.
  """
  deleteRoles(ids: [ID!]): [Role]
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): SendUserPasswordResetLinkResult
  redeemUserPasswordResetToken(
    email: String!
    token: String!
    password: String!
  ): RedeemUserPasswordResetTokenResult
  endSession: Boolean!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type SendUserPasswordResetLinkResult {
  code: PasswordResetRequestErrorCode!
  message: String!
}

enum PasswordResetRequestErrorCode {
  IDENTITY_NOT_FOUND
  MULTIPLE_IDENTITY_MATCHES
}

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  MULTIPLE_IDENTITY_MATCHES
  TOKEN_NOT_SET
  TOKEN_MISMATCH
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  """
   Search for all User items which match the where clause.
  """
  allUsers(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]

  """
   Search for the User item with the matching ID.
  """
  User(where: UserWhereUniqueInput!): User

  """
   Perform a meta-query on all User items which match the where clause.
  """
  _allUsersMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use usersCount instead."
    )
  usersCount(where: UserWhereInput! = {}): Int

  """
   Search for all Roti items which match the where clause.
  """
  allRotis(
    where: RotiWhereInput! = {}
    search: String
    sortBy: [SortRotisBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RotiOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Roti!]

  """
   Search for the Roti item with the matching ID.
  """
  Roti(where: RotiWhereUniqueInput!): Roti

  """
   Perform a meta-query on all Roti items which match the where clause.
  """
  _allRotisMeta(
    where: RotiWhereInput! = {}
    search: String
    sortBy: [SortRotisBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RotiOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use rotisCount instead."
    )
  rotisCount(where: RotiWhereInput! = {}): Int

  """
   Search for all Vote items which match the where clause.
  """
  allVotes(
    where: VoteWhereInput! = {}
    search: String
    sortBy: [SortVotesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [VoteOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Vote!]

  """
   Search for the Vote item with the matching ID.
  """
  Vote(where: VoteWhereUniqueInput!): Vote

  """
   Perform a meta-query on all Vote items which match the where clause.
  """
  _allVotesMeta(
    where: VoteWhereInput! = {}
    search: String
    sortBy: [SortVotesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [VoteOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use votesCount instead."
    )
  votesCount(where: VoteWhereInput! = {}): Int

  """
   Search for all Role items which match the where clause.
  """
  allRoles(
    where: RoleWhereInput! = {}
    search: String
    sortBy: [SortRolesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RoleOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Role!]

  """
   Search for the Role item with the matching ID.
  """
  Role(where: RoleWhereUniqueInput!): Role

  """
   Perform a meta-query on all Role items which match the where clause.
  """
  _allRolesMeta(
    where: RoleWhereInput! = {}
    search: String
    sortBy: [SortRolesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RoleOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use rolesCount instead."
    )
  rolesCount(where: RoleWhereInput! = {}): Int
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(
    email: String!
    token: String!
  ): ValidateUserPasswordResetTokenResult
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
